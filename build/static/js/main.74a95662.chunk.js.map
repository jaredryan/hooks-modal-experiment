{"version":3,"sources":["Utils/formatUtil.js","Components/Modal/Modal.js","Components/Modal/index.js","Components/Page/index.js","Components/Page/Page.js","Containers/HomePage/index.js","Containers/HomePage/HomePage.js","App.js","index.js"],"names":["capitalize","string","firstChar","charAt","toUpperCase","length","substring","buttonsInformation","type","content","mapButtonInfoToButton","props","refs","info","className","ref","onClick","Modal","React","forwardRef","secondaryButton","useRef","primaryButton","useImperativeHandle","focus","current","open","onClickOutsideModal","Array","from","_info","index","map","Page","openModal","HomePage","buttonRef","modalRef","useState","modalIsOpen","setModalIsOpen","buttonToFocus","setButtonToFocus","closeModal","onKeyDown","event","keyCode","shiftKey","document","activeElement","useEffect","addEventListener","body","classList","add","remove","removeEventListener","onPrimaryClick","App","ReactDOM","render","getElementById"],"mappings":"iSAAaA,EAAa,SAACC,GACzB,IAAKA,EAAQ,MAAO,GACpB,IAAMC,EAAYD,EAAOE,OAAO,GAAGC,cACnC,OAAsB,IAAlBH,EAAOI,OAAqBH,EACzBA,EAAYD,EAAOK,UAAU,I,eCAhCC,EAAqB,CAAC,CAC1BC,KAAM,YACNC,QAAS,gBACR,CACDD,KAAM,UACNC,QAAS,gBAGLC,EAAwB,SAACC,EAAOC,GAAR,OAAiB,SAAAC,GAAI,OACjD,wBAEEC,UAAWD,EAAKL,KAChBO,IAAKH,EAAK,GAAD,OAAIC,EAAKL,KAAT,WACTQ,QAASL,EAAM,KAAD,OAAMX,EAAWa,EAAKL,MAAtB,UAJhB,SAMGK,EAAKJ,SALDI,EAAKL,QCbCS,EDsBDC,IAAMC,YAAW,SAACR,EAAOI,GACrC,IAAMH,EAAO,CACXQ,gBAAiBC,mBACjBC,cAAeD,oBAejB,OAZAE,8BAAoBR,GAAK,iBAAO,CAC9BS,MAAO,WACLZ,EAAKQ,gBAAgBK,QAAQD,SAE/B,sBACE,OAAOZ,EAAKQ,gBAAgBK,SAE9B,oBACE,OAAOb,EAAKU,cAAcG,aAK5B,qCACGd,EAAMe,MAAQ,qBAAKZ,UAAU,UAAUE,QAASL,EAAMgB,sBACvD,yBAAoBD,KAAMf,EAAMe,KAAhC,UACE,8CACA,kCACGE,MAAMC,KAAK,CAAExB,OAAQ,KAAM,SAACyB,EAAOC,GAAR,OAAkB,uCAAQA,QAExD,iCACGxB,EAAmByB,IAAItB,EAAsBC,EAAOC,QAN7C,eE3CHqB,G,MCEFf,IAAMC,YAAW,SAACR,EAAOI,GAAR,OAC5B,sBAAKD,UAAU,gBAAf,UACE,wBACEE,QAASL,EAAMuB,UACfnB,IAAKA,EACLD,UAAU,UAHZ,4BAOA,mBAAGA,UAAU,eAAb,SAA4B,0DCXjBqB,ECGH,WACV,IAAMC,EAAYf,mBACZgB,EAAWhB,mBACjB,EAAsCiB,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0CF,qBAA1C,mBAAOG,EAAP,KAAsBC,EAAtB,KAGMC,EAAa,kBAAMH,GAAe,IAYlCI,EAAY,SAAAC,GACM,IAAlBA,EAAMC,UACJD,EAAME,SACJV,EAASZ,QAAQL,kBAAoB4B,SAASC,eAChDP,EAAiBL,EAASZ,QAAQH,eAGhCe,EAASZ,QAAQH,gBAAkB0B,SAASC,eAC9CP,EAAiBL,EAASZ,QAAQL,mBAuB1C,OAjBA8B,qBAAU,WAOR,OANIX,GACFS,SAASG,iBAAiB,UAAWP,GAzBvCI,SAASI,KAAKC,UAAUC,IAAI,aAC5BjB,EAASZ,QAAQD,UA2BQ,IAAhBe,IAvBTS,SAASI,KAAKC,UAAUE,OAAO,aAC/BnB,EAAUX,QAAQD,SAwBX,kBAAMwB,SAASQ,oBAAoB,UAAWZ,MACpD,CAACL,IAEJW,qBAAU,WACJT,IACFA,EAAcjB,QACdkB,OAED,CAACD,IAGF,qCACE,cAAC,EAAD,CACEd,oBAAqBgB,EACrBc,eAAgBd,EAChBjB,KAAMa,EACNxB,IAAKsB,IAEP,cAAC,EAAD,CACEH,UArDY,kBAAMM,GAAe,IAsDjCG,YAAU,EACV5B,IAAKqB,QC1DEsB,G,YAFH,kBAAM,cAAC,EAAD,MCAlBC,IAASC,OACP,cAAC,EAAD,IACAZ,SAASa,eAAe,W","file":"static/js/main.74a95662.chunk.js","sourcesContent":["export const capitalize = (string) => {\n  if (!string) return '';\n  const firstChar = string.charAt(0).toUpperCase();\n  if (string.length === 1) return firstChar;\n  return firstChar + string.substring(1);\n}\n","import React, { useRef, useImperativeHandle } from 'react';\nimport { capitalize } from '../../Utils/formatUtil';\nimport './modal.css';\n\nconst buttonsInformation = [{\n  type: 'secondary',\n  content: 'CTA Button 1'\n}, {\n  type: 'primary',\n  content: 'Close Modal'\n}];\n\nconst mapButtonInfoToButton = (props, refs) => info => (\n  <button\n    key={info.type}\n    className={info.type}\n    ref={refs[`${info.type}Button`]}\n    onClick={props[`on${capitalize(info.type)}Click`]}\n  >\n    {info.content}\n  </button>\n);\n\nconst Modal = React.forwardRef((props, ref) => {\n  const refs = {\n    secondaryButton: useRef(),\n    primaryButton: useRef(),\n  };\n\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      refs.secondaryButton.current.focus();\n    },\n    get secondaryButton() {\n      return refs.secondaryButton.current;\n    },\n    get primaryButton() {\n      return refs.primaryButton.current;\n    },\n  }));\n\n  return (\n    <>\n      {props.open && <div className=\"overlay\" onClick={props.onClickOutsideModal} />}\n      <dialog key=\"modal\" open={props.open}>\n        <h1>Modal Header</h1>\n        <section>\n          {Array.from({ length: 40 }, (_info, index) => <p key={index}>Content</p>)}\n        </section>\n        <footer>\n          {buttonsInformation.map(mapButtonInfoToButton(props, refs))}\n        </footer>\n      </dialog>\n    </>\n  )\n});\n\nexport default Modal;\n","import Modal from './Modal';\nexport default Modal;\n","import Page from './Page';\nexport default Page;\n","import React from 'react';\nimport './page.css';\n\nconst Page = React.forwardRef((props, ref) => (\n  <div className=\"pageContainer\">\n    <button\n      onClick={props.openModal}\n      ref={ref}\n      className=\"primary\"\n    >\n      CSS Test Modal\n    </button>\n    <p className=\"needToScroll\"><b>Scroll to see me</b></p>\n  </div>\n));\n\nexport default Page;\n","import HomePage from './HomePage';\nexport default HomePage;\n","import React, { useState, useRef, useEffect } from 'react';\nimport Modal from '../../Components/Modal';\nimport Page from '../../Components/Page';\n\nconst App = () => {\n  const buttonRef = useRef();\n  const modalRef = useRef();\n  const [modalIsOpen, setModalIsOpen] = useState();\n  const [buttonToFocus, setButtonToFocus] = useState();\n\n  const openModal = () => setModalIsOpen(true);\n  const closeModal = () => setModalIsOpen(false);\n\n  const handleOpenModal = () => {\n    document.body.classList.add('openModal');\n    modalRef.current.focus();\n  };\n\n  const handleCloseModal = () => {\n    document.body.classList.remove('openModal');\n    buttonRef.current.focus();\n  };\n\n  const onKeyDown = event => {\n    if (event.keyCode === 9) {\n      if (event.shiftKey) {\n        if (modalRef.current.secondaryButton === document.activeElement) {\n          setButtonToFocus(modalRef.current.primaryButton)\n        }\n      } else {\n        if (modalRef.current.primaryButton === document.activeElement) {\n          setButtonToFocus(modalRef.current.secondaryButton)\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (modalIsOpen) {\n      document.addEventListener('keydown', onKeyDown);\n      handleOpenModal();\n    }\n    else if (modalIsOpen === false) handleCloseModal();\n\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [modalIsOpen]);\n\n  useEffect(() => {\n    if (buttonToFocus) {\n      buttonToFocus.focus()\n      setButtonToFocus();\n    };\n  }, [buttonToFocus]);\n\n  return (\n    <>\n      <Modal\n        onClickOutsideModal={closeModal}\n        onPrimaryClick={closeModal}\n        open={modalIsOpen}\n        ref={modalRef}\n      />\n      <Page\n        openModal={openModal}\n        closeModal\n        ref={buttonRef}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport HomePage from './Containers/HomePage';\nimport './app.css';\nimport './Styles/button.css';\n\nconst App = () => <HomePage />\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}